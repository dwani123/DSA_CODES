#include <stdio.h>
#include <stdlib.h>

struct node {
    int key;
    struct node* left;
    struct node* right;
};

// Function to create a new node with the given key
struct node* createNode(int key) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a key into the binary search tree
struct node* insert(struct node* root, int key) {
    if (root == NULL)
        return createNode(key);
    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);
    return root;
}

// Function to perform inorder traversal of the binary search tree
void inorder(struct node* root) {
    if (root == NULL)
        return;
    inorder(root->left);
    printf("%d ", root->key);
    inorder(root->right);
}

// Function to search for a key in the binary search tree
struct node* search(struct node* root, int key) {
    if (root == NULL || root->key == key)
        return root;
    if (key < root->key)
        return search(root->left, key);
    return search(root->right, key);
}

// Function to find the minimum key value node in a binary search tree
struct node* minValueNode(struct node* node) {
    struct node* current = node;
    while (current && current->left != NULL)
        current = current->left;
    return current;
}

// Function to delete a key from the binary search tree
struct node* deleteNode(struct node* root, int key) {
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }
        struct node* temp = minValueNode(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

// Function to get the height of a binary tree
int getHeight(struct node* root) {
    if (root == NULL)
        return 0;
    int leftHeight = getHeight(root->left);
    int rightHeight = getHeight(root->right);
    return (leftHeight > rightHeight) ? leftHeight + 1 : rightHeight + 1;
}

// Function to count the number of nodes at each level
void countNodesAtEachLevel(struct node* root, int level, int* count) {
    if (root == NULL)
        return;
    count[level]++;
    countNodesAtEachLevel(root->left, level + 1, count);
    countNodesAtEachLevel(root->right, level + 1, count);
}

// Function to print the binary tree structure
void printTree(struct node* root, int level) {
    if (root == NULL)
        return;
    printTree(root->right, level + 1);
    for (int i = 0; i < level; i++)
        printf("    ");
    printf("%d\n", root->key);
    printTree(root->left, level + 1);
}

int main() {
    struct node* root = NULL;
    int choice, key;

    while (1) {
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Count Nodes at Each Level\n");
        printf("4. Print Tree\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                printf("Key %d inserted successfully.\n", key);
                printf("\n");
                break;
            case 2:
                printf("Enter the key to delete: ");
                scanf("%d", &key);
                root = deleteNode(root, key);
                printf("Key %d deleted successfully.\n", key);
                printf("\n");
                break;
            case 3: {
                printf("Counting Nodes at Each Level:\n");
                int height = getHeight(root);
                int count[height];
                for (int i = 0; i < height; i++)
                    count[i] = 0;
                countNodesAtEachLevel(root, 0, count);
                for (int i = 0; i < height; i++)
                    printf("Level %d: %d nodes\n", i, count[i]);
                printf("\n");
                break;
            }
            case 4:
                printf("Binary Search Tree:\n");
                printTree(root, 0);
                printf("\n");
                break;
            case 5:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
